/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"reflect"
	"testing"
)

func BenchmarkConformance(t *testing.B) {
	for t.Loop() {
			for _, tc := range []struct {
				desc        string
				filename    string
				code        string
				targetFrame frame
				output      *ConformanceData
			}{
				{
					desc:     "Grabs comment above test",
					filename: "test/list/main_test.go",
					code: `package test
		
			var num = 3
			func Helper(x int) { return x / 0 }
			/*
			   Testname: Kubelet-OutputToLogs
			   Description: By default the stdout and stderr from the process
			   being executed in a pod MUST be sent to the pod's logs.
			*/
			 framework.ConformanceIt("validates describe with ConformanceIt", func() {})
			})`,
					output: &ConformanceData{
						URL:         "https://github.com/kubernetes/kubernetes/tree/master/test/list/main_test.go#L11",
						TestName:    "Kubelet-OutputToLogs",
						Description: `By default the stdout and stderr from the process being executed in a pod MUST be sent to the pod's logs.`,
						File:        "test/list/main_test.go",
					},
					targetFrame: frame{File: "test/list/main_test.go", Line: 11},
				}, {
					desc:     "Handles extra spaces",
					filename: "e2e/foo.go",
					code: `package test
		
			var _ = SIGDescribe("Feature", func() {
				   Context("with context and extra spaces before It block should still pick up Testname", func() {
						   //                                      Testname: Test with spaces
						   //Description: Should pick up testname even if it is not within 3 spaces
						   //even when executed from memory.
						   framework.ConformanceIt("should work", func() {})
				   })
			})`,
					output: &ConformanceData{
						URL:         "https://github.com/kubernetes/kubernetes/tree/master/e2e/foo.go#L8",
						TestName:    "Test with spaces",
						Description: `Should pick up testname even if it is not within 3 spaces even when executed from memory.`,
						File:        "e2e/foo.go",
					},
					targetFrame: frame{File: "e2e/foo.go", Line: 8},
				}, {
					desc:     "Should target the correct comment based on the line numbers (second)",
					filename: "e2e/foo.go",
					code: `package test
		
			var _ = SIGDescribe("Feature", func() {
				   Context("with context and extra spaces before It block should still pick up Testname", func() {
						   // Testname: First test
						   // Description: Should pick up testname even if it is not within 3 spaces
						   // even when executed from memory.
						   framework.ConformanceIt("should work", func() {})
		
						   // Testname: Second test
						   // Description: Should target the correct test/comment based on the line numbers
						   framework.ConformanceIt("should work", func() {})
				   })
			})`,
					output: &ConformanceData{
						URL:         "https://github.com/kubernetes/kubernetes/tree/master/e2e/foo.go#L13",
						TestName:    "Second test",
						Description: `Should target the correct test/comment based on the line numbers`,
						File:        "e2e/foo.go",
					},
					targetFrame: frame{File: "e2e/foo.go", Line: 13},
				}, {
					desc:     "Should target the correct comment based on the line numbers (first)",
					filename: "e2e/foo.go",
					code: `package test
		
			var _ = SIGDescribe("Feature", func() {
				   Context("with context and extra spaces before It block should still pick up Testname", func() {
						   // Testname: First test
						   // Description: Should target the correct test/comment based on the line numbers
						   framework.ConformanceIt("should work", func() {})
		
						   // Testname: Second test
						   // Description: Should target the correct test/comment based on the line numbers
						   framework.ConformanceIt("should work", func() {})
				   })
			})`,
					output: &ConformanceData{
						URL:         "https://github.com/kubernetes/kubernetes/tree/master/e2e/foo.go#L8",
						TestName:    "First test",
						Description: `Should target the correct test/comment based on the line numbers`,
						File:        "e2e/foo.go",
					},
					targetFrame: frame{File: "e2e/foo.go", Line: 8},
				},
			} {
				t.Run(tc.desc, func(t *testing.B) {
					*confDoc = true
					cd, err := scanFileForFrame(tc.filename, tc.code, tc.targetFrame)
					if err != nil {
						panic(err)
					}
					if !reflect.DeepEqual(cd, tc.output) {
						t.Errorf("code:\n%s\ngot  %+v\nwant %+v",
							tc.code, cd, tc.output)
					}
				})
	}
	}
}